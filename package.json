{
  "name": "scalable-userlogin-microservices",
  "version": "1.0.0",
  "description": "Scalable user login and registration system with microservices architecture capable of handling 100,000+ requests per second",
  "main": "services/docker-compose.yml",
  "scripts": {
    "dev": "npm run dev:core",
    "dev:core": "cd services && docker compose up --build postgres redis user-service-1 auth-service-1 api-gateway-1",
    "dev:scale": "cd services && docker compose up --build",
    "dev:basic": "cd services && docker compose up postgres redis user-service-1 auth-service-1 api-gateway-1",
    "dev:logs": "cd services && docker compose logs -f",
    "dev:down": "cd services && docker compose down",
    "dev:clean": "cd services && docker compose down -v --remove-orphans && docker system prune -f",
    "dev:rebuild": "npm run dev:clean && npm run install:all && npm run dev:core",
    "install:all": "npm run install:user && npm run install:auth && npm run install:gateway",
    "install:user": "cd services/user-service && npm install",
    "install:auth": "cd services/auth-service && npm install",
    "install:gateway": "cd services/api-gateway && npm install",
    "prisma:generate": "cd services/user-service && npx prisma generate",
    "prisma:migrate": "cd services/user-service && npx prisma migrate dev",
    "prisma:seed": "node prisma/seed.js",
    "test:load": "node test/load-test.js",
    "deploy:user": "cd services/user-service && railway up",
    "deploy:auth": "cd services/auth-service && railway up",
    "deploy:gateway": "cd services/api-gateway && railway up",

    "seed:help": "echo '\n🌱 SEEDING COMMANDS:\n\n📋 Main Commands:\n  seed:10m         - Seed 10 million users (production)\n  seed:full        - Complete workflow (optimize + seed + restore + verify)\n  seed:dev         - Development test (100K users + verify)\n\n🧪 Testing:\n  seed:test:100k   - Test with 100,000 users\n  seed:test:1m     - Test with 1,000,000 users\n  seed:quick       - Quick seed (original small dataset)\n\n🔧 Database Management:\n  seed:optimize    - Optimize database for bulk seeding\n  seed:restore     - Restore database after seeding\n  seed:clean       - Clean all users from database\n\n📊 Monitoring:\n  seed:verify      - Verify seeding results & performance\n  seed:status      - Show current seeding progress\n\n💡 Recommended workflow:\n  1. npm run seed:test:100k     (test first)\n  2. npm run seed:full          (production seeding)\n'",

    "seed:10m": "node prisma/seed-optimized.js",
    "seed:optimize": "node prisma/optimize-db.js",
    "seed:restore": "node prisma/restore-db.js",
    "seed:test:100k": "node prisma/seed-test.js 100k",
    "seed:test:1m": "node prisma/seed-test.js 1m",
    "seed:verify": "node prisma/seed-verify.js",
    "seed:clean": "node prisma/seed-clean.js",
    "seed:quick": "node prisma/seed.js",

    "seed:status": "node -e \"const fs = require('fs'); try { const progress = JSON.parse(fs.readFileSync('seed-progress.json', 'utf8')); console.log('\\n📊 Seeding Progress:'); console.log('├── Users seeded:', progress.usersSeeded.toLocaleString()); console.log('├── Batches completed:', progress.batchesCompleted.toLocaleString()); console.log('├── Last batch ID:', progress.lastBatchId); console.log('└── Progress:', ((progress.usersSeeded / 10000000) * 100).toFixed(2) + '%'); } catch(e) { console.log('❌ No seeding in progress or completed'); }\"",

    "seed:count": "node -e \"const { PrismaClient } = require('@prisma/client'); const prisma = new PrismaClient(); prisma.user.count().then(count => { console.log('📊 Total users in database:', count.toLocaleString()); prisma.\\$disconnect(); }).catch(console.error);\"",

    "seed:full": "npm run seed:optimize && npm run seed:10m && npm run seed:restore && npm run seed:verify",
    "seed:dev": "npm run seed:test:100k && npm run seed:verify"
  },
  "keywords": ["microservices", "scalable", "authentication", "nodejs", "redis", "postgresql", "docker"],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@faker-js/faker": "^9.9.0",
    "@prisma/client": "^6.12.0",
    "bcrypt": "^6.0.0",
    "dotenv": "^17.2.0",
    "express": "^5.1.0",
    "express-rate-limit": "^7.5.1",
    "pg": "^8.16.3",
    "prisma": "^6.12.0",
    "redis": "^5.6.0",
    "zod": "^3.25.76"
  },
  "devDependencies": {
    "nodemon": "^3.1.10"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  }
}
